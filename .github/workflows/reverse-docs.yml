name: Reverse Docs Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: reverse-docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 (with Maven cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Show Java & Maven
        run: |
          java -version
          ./mvnw -v

      # ---- Build (skip tests for faster packaging; 필요시 verify 단계 추가) ----
      - name: Build (skip tests)
        run: ./mvnw -B -DskipTests package

      - name: Resolve JAR path
        id: jar
        run: |
          set -e
          JAR_FILE="$(find target -maxdepth 1 -type f -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar' | head -n 1)"
          if [ -z "$JAR_FILE" ]; then
            echo "No runnable JAR found in target/"
            ls -l target || true
            exit 1
          fi
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
          echo "Found: $JAR_FILE"

      # ---- Run app in background (force port/context/profile) ----
      - name: Start app (background)
        run: |
          nohup java -jar "$JAR_FILE" \
            --server.port=9966 \
            --server.servlet.context-path=/petclinic \
            --spring.profiles.active=h2,spring-data-jpa \
            --management.endpoints.web.exposure.include=health,info \
            > target/app.log 2>&1 &
          echo $! > target/petclinic.pid
          echo "PID: $(cat target/petclinic.pid)"

      # ---- Robust health check (multi-URL + longer wait + periodic log tail) ----
      - name: Wait for health
        run: |
          set -e
          urls=(
            http://localhost:9966/petclinic/actuator/health
            http://127.0.0.1:9966/petclinic/actuator/health
            # fallback (classic root context)
            http://localhost:9966/actuator/health
            # in case you accidentally run classic PetClinic on 8080
            http://localhost:8080/actuator/health
          )
          for i in $(seq 1 120); do
            for u in "${urls[@]}"; do
              if curl -fsS -4 "$u" >/dev/null; then
                echo "App is up: $u"
                echo "HEALTH_URL=$u" >> $GITHUB_ENV
                exit 0
              fi
            done
            if [ $((i%10)) -eq 0 ]; then
              echo "---- tail app.log (last 120 lines) ----"
              tail -n 120 target/app.log || true
              echo "---- listening ports (9966) ----"
              (command -v ss >/dev/null && ss -lptn 'sport = :9966' || lsof -i :9966 || true)
            fi
            sleep 2
          done
          echo "App failed to become healthy within timeout"
          echo "---- last 200 lines of app.log ----"
          tail -n 200 target/app.log || true
          (command -v ss >/dev/null && ss -lptn || true)
          exit 1

      # ---- Fetch OpenAPI (JSON + YAML endpoint) ----
      - name: Fetch OpenAPI (JSON/YAML)
        run: |
          set -e
          # common PetClinic REST paths
          JSON_URL=${OPENAPI_JSON_URL:-http://localhost:9966/petclinic/v3/api-docs}
          YAML_URL=${OPENAPI_YAML_URL:-http://localhost:9966/petclinic/v3/api-docs.yaml}
          mkdir -p target/openapi
          echo "Try JSON: $JSON_URL"
          curl -fsS "$JSON_URL" -o target/openapi/openapi.json || echo "JSON_
