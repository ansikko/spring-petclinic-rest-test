name: Reverse Docs Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: reverse-docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 (with Maven cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Show Java & Maven
        shell: bash
        run: |
          set -Eeuo pipefail
          java -version
          ./mvnw -v

      - name: Build (skip tests)
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw -B -DskipTests package

      - name: Resolve JAR path
        id: jar
        shell: bash
        run: |
          set -Eeuo pipefail
          JAR_FILE="$(find target -maxdepth 1 -type f -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar' | head -n 1 || true)"
          if [ -z "${JAR_FILE:-}" ]; then
            echo "No runnable JAR found in target/"
            ls -l target || true
            exit 1
          fi
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
          echo "Found: $JAR_FILE"

      - name: Start app (background)
        shell: bash
        run: |
          set -Eeuo pipefail
          nohup java -jar "$JAR_FILE" \
            --server.port=9966 \
            --server.servlet.context-path=/petclinic \
            --spring.profiles.active=h2,spring-data-jpa \
            --management.endpoints.web.exposure.include=health,info \
            > target/app.log 2>&1 &
          echo $! > target/petclinic.pid
          echo "PID: $(cat target/petclinic.pid)"

      - name: Wait for health
        shell: bash
        run: |
          set -Eeuo pipefail
          urls=(
            http://localhost:9966/petclinic/actuator/health
            http://127.0.0.1:9966/petclinic/actuator/health
            http://localhost:9966/actuator/health
            http://localhost:8080/actuator/health
          )
          for i in $(seq 1 120); do
            for u in "${urls[@]}"; do
              if curl -fsS -4 "$u" >/dev/null; then
                echo "App is up: $u"
                echo "HEALTH_URL=$u" >> $GITHUB_ENV
                exit 0
              fi
            done
            if [ $((i%10)) -eq 0 ]; then
              echo "---- tail app.log (last 120 lines) ----"
              tail -n 120 target/app.log || true
              echo "---- listening ports ----"
              (command -v ss >/dev/null && ss -lptn || lsof -i :9966 || true)
            fi
            sleep 2
          done
          echo "App failed to become healthy within timeout"
          tail -n 200 target/app.log || true
          (command -v ss >/dev/null && ss -lptn || true)
          exit 1

      - name: Fetch OpenAPI (JSON/YAML)
        shell: bash
        run: |
          set -Eeuo pipefail
          JSON_URL="${OPENAPI_JSON_URL:-http://localhost:9966/petclinic/v3/api-docs}"
          YAML_URL="${OPENAPI_YAML_URL:-http://localhost:9966/petclinic/v3/api-docs.yaml}"
          mkdir -p target/openapi
          echo "Try JSON: $JSON_URL"
          curl -sS -w "\nHTTP %{http_code}\n" -o target/openapi/openapi.json "$JSON_URL" || true
          [ -s target/openapi/openapi.json ] || rm -f target/openapi/openapi.json
          echo "Try YAML: $YAML_URL"
          curl -sS -w "\nHTTP %{http_code}\n" -o target/openapi/openapi.yaml "$YAML_URL" || true
          [ -s target/openapi/openapi.yaml ] || rm -f target/openapi/openapi.yaml
          echo "OpenAPI dir listing:"; ls -l target/openapi || true

      - name: Install jq (for JSON sanitize)
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

      - name: Sanitize OpenAPI (fix invalid fields)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -f target/openapi/openapi.json ]; then
            tmp="$(mktemp)"
            jq '
              if (.info? and .info.license? and .info.license.extensions?) then
                .info.license |= (. + {"x-extensions": .extensions} | del(.extensions))
              else . end
            ' target/openapi/openapi.json > "$tmp" && mv "$tmp" target/openapi/openapi.json
            echo "Sanitized: moved info.license.extensions -> info.license.x-extensions"
          else
            echo "No openapi.json to sanitize (skipping)"
          fi

      - name: Ensure both JSON and YAML specs (no heredoc)
        shell: bash
        run: |
          set -Eeuo pipefail
          python3 -m pip install --user PyYAML >/dev/null 2>&1 || true
          if [ -f target/openapi/openapi.json ] && [ ! -f target/openapi/openapi.yaml ]; then
            python3 -c "import json,yaml; d='target/openapi/openapi.json'; y='target/openapi/openapi.yaml'; data=json.load(open(d)); yaml.safe_dump(data, open(y,'w'), sort_keys=False); print('Created openapi.yaml from json')"
          elif [ -f target/openapi/openapi.yaml ] && [ ! -f target/openapi/openapi.json ]; then
            python3 -c "import json,yaml; y='target/openapi/openapi.yaml'; d='target/openapi/openapi.json'; data=yaml.safe_load(open(y)); json.dump(data, open(d,'w'), indent=2); print('Created openapi.json from yaml')"
          else
            echo "Both or neither present; no conversion"
          fi

      - name: Install OpenAPI Generator CLI
        shell: bash
        run: |
          set -Eeuo pipefail
          curl -sL https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.7.0/openapi-generator-cli-7.7.0.jar -o openapi-generator-cli.jar

      - name: Generate HTML API docs
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p target/api-docs
          if [ -f target/openapi/openapi.json ]; then
            java -jar openapi-generator-cli.jar generate \
              -i target/openapi/openapi.json \
              -g html2 \
              --skip-validate-spec \
              -o target/api-docs/json || true
          fi
          if [ -f target/openapi/openapi.yaml ]; then
            java -jar openapi-generator-cli.jar generate \
              -i target/openapi/openapi.yaml \
              -g html2 \
              --skip-validate-spec \
              -o target/api-docs/yaml || true
          fi

      - name: Extract dependency graph (jdeps)
        shell: bash
        run: |
          set -Eeuo pipefail
          jdeps -q --multi-release 17 -recursive -verbose:class "$JAR_FILE" > target/jdeps.txt || true

      - name: Inspect target
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "---- target ----"; ls -al target || true
          echo "---- openapi ----"; ls -al target/openapi || true
          echo "---- api-docs/json ----"; ls -al target/api-docs/json || true
          echo "---- api-docs/yaml ----"; ls -al target/api-docs/yaml || true

      - name: Ensure artifact bundle
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p target/_meta
          {
            echo "Reverse Docs Artifact"
            date -u
            echo "Jar: ${JAR_FILE:-N/A}"
            echo "Health URL: ${HEALTH_URL:-N/A}"
          } > target/_meta/README.txt
          if [ ! -f target/app.log ]; then
            echo "app.log not found - app may not have started or logs redirected elsewhere" > target/app.log
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reverse-docs-artifacts
          path: |
            target/openapi/**
            target/api-docs/**
            target/jdeps.txt
            target/app.log
            target/site/**
            target/surefire-reports/**
            target/_meta/**
          if-no-files-found: warn
          retention-days: 14

      - name: Stop app
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -f target/petclinic.pid ]; then
            kill $(cat target/petclinic.pid) || true
          fi

  deploy-pages:
    needs: build-test-docs
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages (auto enable)
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: reverse-docs-artifacts
          path: ./_artifacts

      - name: Inspect downloaded artifacts
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "---- _artifacts tree ----"
          (command -v tree >/dev/null || sudo apt-get update >/dev/null 2>&1 && sudo apt-get install -y tree >/dev/null 2>&1) || true
          tree -a -L 3 _artifacts || find _artifacts -maxdepth 3 -type f -print

      - name: Prepare site
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p public

          # Copy html2 docs into subfolders
          if [ -d _artifacts/target/api-docs/json ]; then
            mkdir -p public/docs-json
            cp -r _artifacts/target/api-docs/json/* public/docs-json/
          fi
          if [ -d _artifacts/target/api-docs/yaml ]; then
            mkdir -p public/docs-yaml
            cp -r _artifacts/target/api-docs/yaml/* public/docs-yaml/
          fi

          # Copy OpenAPI specs
          mkdir -p public/openapi
          if [ -d _artifacts/target/openapi ]; then
            cp -r _artifacts/target/openapi/* public/openapi/ || true
          fi

          # Debug files for quick diagnosis
          if [ -f _artifacts/target/app.log ]; then
            cp _artifacts/target/app.log public/app.log
          fi
          if [ -f _artifacts/target/_meta/README.txt ]; then
            cp _artifacts/target/_meta/README.txt public/ARTIFACT_INFO.txt
          fi

          # Build index.html with only existing links
          has_json_docs=false; has_yaml_docs=false; has_yaml=false; has_json=false
          [ -f public/docs-json/index.html ] && has_json_docs=true
          [ -f public/docs-yaml/index.html ] && has_yaml_docs=true
          [ -f public/openapi/openapi.yaml ] && has_yaml=true
          [ -f public/openapi/openapi.json ] && has_json=true

          {
            echo '<!doctype html><meta charset="utf-8"><title>Reverse Docs</title>'
            echo '<h1>Reverse Docs</h1>'
            echo '<ul>'
            $has_json_docs && echo '  <li><a href="./docs-json/index.html">API Docs (html2, from JSON)</a></li>'
            $has_yaml_docs && echo '  <li><a href="./docs-yaml/index.html">API Docs (html2, from YAML)</a></li>'
            $has_yaml && echo '  <li><a href="./openapi/openapi.yaml">openapi.yaml</a></li>'
            $has_json && echo '  <li><a href="./openapi/openapi.json">openapi.json</a></li>'
            echo '  <li><a href="./app.log">app.log</a> (debug)</li>'
            echo '  <li><a href="./ARTIFACT_INFO.txt">artifact info</a> (debug)</li>'
            echo '</ul>'
            if ! $has_json_docs && ! $has_yaml_docs && ! $has_yaml && ! $has_json; then
              echo '<p><strong>No API docs/specs found in artifact.</strong><br/>Check app.log and the build job logs (Fetch OpenAPI / Generate HTML).</p>'
            fi
          } > public/index.html

          echo "Public dir contents:"; find public -maxdepth 2 -type f -print

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
